/******cs2123p3.c by Carla Ramirez******************



******************************************/
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include "cs2123p3.h"

// Main program
int main(int argc, char *argv[])
{
    char szInputBuffer[100];
    
    Simulation sim;
    
    LinkedList list;
    Event value;
    int iTimeValue = 1000;
    NodeLL *pNewNode;
    int iDeltaNextArrival = 0;	
    int iClock = 0;
    list = newLinkedList();
    sim  = (Simulation) malloc(sizeof(Simulation));
    while(fgets(szInputBuffer, 100, stdin) != NULL)
    {
       sscanf(szInputBuffer," %s %d %d",value.person.szName,&value.person.iDepartUnits,&iDeltaNextArrival);

       
    
       
       pNewNode = insertOrderedLL(list, value);
       pNewNode->event.person.iDepartUnits = iClock + value.person.iDepartUnits; 
    
                printf("\n%s arrives at %d and departs at %d\n",pNewNode->event.person.szName,iClock,pNewNode->event.person.iDepartUnits);	
  
       
       iClock += iDeltaNextArrival;

     
       if(iClock == iDeltaNextArrival)
           pNewNode->event.iEventType = EVT_ARRIVE;
       else
	   pNewNode->event.iEventType = EVT_DEPART;

    }

    pNewNode = list->pHead;
    sim->eventList = list;

    runSimulation(sim, iTimeValue);  
    
}

LinkedList newLinkedList()
{
    LinkedList list  = (LinkedList) malloc(sizeof(LinkedListImp));
    list->pHead = NULL; // empty list
    return list;
}
void freeNode(LinkedList list, NodeLL *pNode)
{
    free(pNode);	
}
int removeLL(LinkedList list, Event *pValue)
{
     NodeLL *pRemove;
     if(list->pHead == NULL)
	 return FALSE;
    *pValue = list->pHead->event;
     pRemove = list->pHead;
     list->pHead = list->pHead->pNext;
     freeNode(list,pRemove);
     return TRUE;
}
NodeLL *allocateNodeLL(LinkedList list, Event value)
{
    NodeLL *pNew;
    pNew = (NodeLL *)malloc(sizeof(NodeLL));
    if(pNew == NULL)
	ErrExit(ERR_ALGORITHM, "No avaliable memory for linked list");
    pNew->event = value;
    pNew->pNext = NULL;
    return pNew;
}
NodeLL *insertOrderedLL(LinkedList list, Event value)
{
    NodeLL *pNew, *pPrecedes;
    // allocate a new node and insert	
    pNew = allocateNodeLL(list, value);
   
	
    // use searchLL to find the pPrecedes node
    searchLL(list, value.iTime, &pPrecedes);

    // check for inserting at the beginning
    // this will also handle when the list is empty
	if(pPrecedes == NULL)
	{
	   pNew->pNext = list->pHead;
	   list->pHead = pNew;
	}
	else
	{
	   pNew->pNext = pPrecedes->pNext;
	   pPrecedes->pNext = pNew;
	}
	return pNew;
}
NodeLL *searchLL(LinkedList list, int match, NodeLL **ppPrecedes)
{
    NodeLL *p;
    *ppPrecedes = NULL;
    for(p = list-> pHead; p!=NULL; p = p->pNext)
     {
	if(match == p->event.iTime)
	    return p;
	if(match < p->event.iTime)
            return NULL;
	*ppPrecedes = p;
     }
     return NULL;
}

void runSimulation(Simulation simulation, int iTimeValue)
{
    while(simulation->eventList != NULL)
    {
     if(simulation->eventList->pHead->event.iTime > iTimeValue)
         break;
     simulation->iClock = simulation->eventList->pHead->event.iTime; //advance clock
     switch(simulation->eventList->pHead->event.iEventType)
         case EVT_ARRIVE:
            printf("%d %s Arrive\n",simulation->eventList->pHead->event.iTime,simulation->eventList->pHead->event.person.szName);	
    
    
    }
}
/******************** ErrExit **************************************
  void ErrExit(int iexitRC, char szFmt[], ... )
Purpose:
    Prints an error message defined by the printf-like szFmt and the
    corresponding arguments to that function.  The number of 
    arguments after szFmt varies dependent on the format codes in
    szFmt.  
    It also exits the program with the specified exit return code.
Parameters:
    I   int iexitRC             Exit return code for the program
    I   char szFmt[]            This contains the message to be printed
                                and format codes (just like printf) for 
                                values that we want to print.
    I   ...                     A variable-number of additional arguments
                                which correspond to what is needed
                                by the format codes in szFmt. 
Notes:
    - Prints "ERROR: " followed by the formatted error message specified 
      in szFmt. 
    - Prints the file path and file name of the program having the error.
      This is the file that contains this routine.
    - Requires including <stdarg.h>
Returns:
    Returns a program exit return code:  the value of iexitRC.
**************************************************************************/
void ErrExit(int iexitRC, char szFmt[], ... )
{
    va_list args;               // This is the standard C variable argument list type
    va_start(args, szFmt);      // This tells the compiler where the variable arguments
    printf("Error: ");
    vprintf(szFmt, args);

    va_end(args);                                // begins.  They begin after szFmt.
                                // va_list argument
    printf("\n");
    exit(iexitRC);
}
/******************** exitUsage *****************************
    void exitUsage(int iArg, char *pszMessage, char *pszDiagnosticInfo)
Purpose:
    In general, this routine optionally prints error messages and diagnostics.
    It also prints usage information.

    If this is an argument error (iArg >= 0), it prints a formatted message 
    showing which argument was in error, the specified message, and
    supplemental diagnostic information.  It also shows the usage. It exits 
    with ERR_COMMAND_LINE.

    the specific message and its supplemental diagnostic information.  It 
    also shows the usage and exist with ERR_COMMAND_LINE. 

    If this is just asking for usage (iArg will be -1), the usage is shown.
    It exits with USAGE_ONLY.
Parameters:
    I int iArg                      command argument subscript or control:
                                    > 0 - command argument subscript
                                    0 - USAGE_ONLY - show usage only
                                    -1 - USAGE_ERR - show message and usage
    I char *pszMessage              error message to print
    I char *pszDiagnosticInfo       supplemental diagnostic information
Notes:
    This routine causes the program to exit.
**************************************************************************/
void exitUsage(int iArg, char *pszMessage, char *pszDiagnosticInfo)
{
    switch (iArg)
    {
        case USAGE_ERR:
            fprintf(stderr, "Error: %s %s\n"
                , pszMessage
                , pszDiagnosticInfo);
            break;
        case USAGE_ONLY:
            break;
        default:
            fprintf(stderr, "Error: bad argument #%d.  %s %s\n"
                , iArg
                , pszMessage
                , pszDiagnosticInfo);
    }
    // print the usage information for any type of command line error
    fprintf(stderr, "p3 -c InputFileName\n");
    if (iArg == USAGE_ONLY)
        exit(USAGE_ONLY); 
    else 
        exit(ERR_COMMAND_LINE);
}

/******************** getToken **************************************
char * getToken (char *pszInputTxt, char szToken[], int iTokenSizePurpose:
    Examines the input text to return the next token.  It also
    returns the position in the text after that token.  This function
    does not skip over white space, but it assumes the input uses 
    spaces to separate tokens.
Parameters:
    I   char *pszInputTxt       input buffer to be parsed
    O   char szToken[]          Returned token.
    I   int iTokenSize          The size of the token variable.  This is used
                                to prevent overwriting memory.  The size
                                should be the memory size minus 1 (for
                                the zero byte).
Returns:
    Functionally:
        Pointer to the next character following the delimiter after the token.
        NULL - no token found.
    szToken parm - the returned token.  If not found, it will be an
        empty string.
Notes:
    - If the token is larger than the szToken parm, we return a truncated value.
    - If a token isn't found, szToken is set to an empty string
    - This function does not skip over white space occurring prior to the token.
**************************************************************************/
 
char * getToken(char *pszInputTxt, char szToken[], int iTokenSize)
{
    int iDelimPos;                      // found position of delim
    int iCopy;                          // number of characters to copy
    char szDelims[20] = " \n\r";        // delimiters
    szToken[0] = '\0';

    // check for NULL pointer 
    if (pszInputTxt == NULL)
        ErrExit(ERR_ALGORITHM
        , "getToken passed a NULL pointer");

    // Check for no token if at zero byte
    if (*pszInputTxt == '\0')
        return NULL;

    // get the position of the first delim
    iDelimPos = strcspn(pszInputTxt, szDelims);

    // if the delim position is at the first character, return no token.
    if (iDelimPos == 0)
        return NULL;

    // see if we have more characters than target token, if so, trunc
    if (iDelimPos > iTokenSize)
        iCopy = iTokenSize;             // truncated size
    else
        iCopy = iDelimPos;

    // copy the token into the target token variable
    memcpy(szToken, pszInputTxt, iCopy);
    szToken[iCopy] = '\0';              // null terminate

    // advance the position
    pszInputTxt += iDelimPos;
    if (*pszInputTxt == '\0')
        return pszInputTxt;
    else
        return pszInputTxt + 1;
}
